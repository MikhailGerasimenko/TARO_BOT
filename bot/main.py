import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters, ConversationHandler
import random
from bot.tarot_data import TAROT_CARDS, COMBINATIONS
import requests
import asyncio
import torch
from transformers import BertTokenizer, BertForSequenceClassification
import os
from torch.nn.functional import softmax
import time
from dotenv import load_dotenv

load_dotenv()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
FIRST_DRAW, SECOND_DRAW, FINAL = range(3)

user_sessions = {}

GROQ_API_KEY = os.getenv('GROQ_API_KEY')
GROQ_URL = "https://api.groq.com/openai/v1/chat/completions"
GROQ_MODEL = os.getenv('GROQ_MODEL', "llama-3.3-70b-versatile")  # –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –º–æ–¥–µ–ª—å Groq

# === –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä–∞ ===
MODEL_PATH = './russian-bert-tarot-classifier'
DEVICE = (
    'cuda' if torch.cuda.is_available() else ('mps' if torch.backends.mps.is_available() else 'cpu')
)

tokenizer = None
model = None
try:
    tokenizer = BertTokenizer.from_pretrained(MODEL_PATH)
    model = BertForSequenceClassification.from_pretrained(MODEL_PATH)
    model.to(DEVICE)
    model.eval()
except Exception as e:
    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–∑ {MODEL_PATH}: {e}. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π.")

# –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–æ ML (—è–≤–Ω—ã–µ –∑–∞–ø—Ä–µ—Ç—ã)
FORBIDDEN_KEYWORDS = [
    '–∫–æ–≥–¥–∞', '—Ç–æ—á–Ω–∞—è –¥–∞—Ç–∞', '–¥–∞—Ç–∞', '–¥–∏–∞–≥–Ω–æ–∑', '–±–µ—Ä–µ–º–µ–Ω', '—É–º—Ä', '–≤—ã–∏–≥—Ä–∞—é', '–ª–æ—Ç–µ—Ä', '—Å–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥', '—Å—É–º–º–∞',
    '—Å–¥–µ–ª–∞–π –∑–∞ –º–µ–Ω—è', '—Ä–µ—à–∏ –∑–∞', '–ø–æ—Ä—á—É', '—Å–≥–ª–∞–∑'
]
CONFIDENCE_THRESHOLD = float(os.getenv('CLASSIFIER_THRESHOLD', '0.65'))

def generate_groq_answer(prompt, model=GROQ_MODEL, max_tokens=None, temperature=0.8):
    if not GROQ_API_KEY:
        return "–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç GROQ_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."
    headers = {
        "Authorization": f"Bearer {GROQ_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": model,
        "messages": [
            {"role": "system", "content": "–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π —Ç–∞—Ä–æ–ª–æ–≥, –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º."},
            {"role": "user", "content": prompt}
        ],
        "temperature": temperature
    }
    if max_tokens is not None:
        data["max_tokens"] = max_tokens
    backoff = 1.0
    for attempt in range(3):
        try:
            response = requests.post(GROQ_URL, headers=headers, json=data, timeout=30)
            if response.status_code >= 400:
                logging.error(f"Groq API error {response.status_code}: {response.text}")
            response.raise_for_status()
            result = response.json()
            return result["choices"][0]["message"]["content"].strip()
        except Exception as e:
            if attempt == 2:
                logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Groq API, –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
                return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Groq API: {e}"
            time.sleep(backoff)
            backoff *= 2
    return "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç Groq API."

def is_question_suitable(question):
    text = (question or '').lower()
    if any(k in text for k in FORBIDDEN_KEYWORDS):
        return False
    if tokenizer is None or model is None:
        # fallback: –µ—Å–ª–∏ –Ω–µ—Ç –º–æ–¥–µ–ª–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å (–º–∏–Ω–∏–º—É–º –±–ª–æ–∫ –ø–æ –∫–ª—é—á–µ–≤–∏–∫–∞–º –≤—ã—à–µ)
        return True
    inputs = tokenizer(text, return_tensors='pt', truncation=True, padding='max_length', max_length=64)
    inputs = {k: v.to(DEVICE) for k, v in inputs.items()}
    with torch.no_grad():
        outputs = model(**inputs)
        probs = softmax(outputs.logits, dim=1).squeeze(0)
        predicted_class = int(torch.argmax(probs).item())
        confidence = float(probs[predicted_class].item())
    if predicted_class == 1 and confidence >= CONFIDENCE_THRESHOLD:
        return True
    return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("""
–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç –æ—Ç –∫–∞—Ä—Ç –¢–∞—Ä–æ, –Ω–æ –ø–æ–º–Ω–∏:

‚ùå –ù–µ –ø–æ–¥—Ö–æ–¥—è—Ç ‚Äì –≤–æ–ø—Ä–æ—Å—ã –æ —Ç–æ—á–Ω—ã—Ö –¥–∞—Ç–∞—Ö, –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∏–∞–≥–Ω–æ–∑–∞—Ö, —Ñ–∏–Ω–∞–Ω—Å–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–ö–æ–≥–¥–∞ —è —Ä–∞–∑–±–æ–≥–∞—Ç–µ—é?¬ª) –∏–ª–∏ —Ä–µ—à–µ–Ω–∏—è –∑–∞ –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π.

‚úÖ –õ—É—á—à–µ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å ‚Äì –æ –ª–∏—á–Ω—ã—Ö –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è—Ö, –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö, –≤—ã–±–æ—Ä–µ –ø—É—Ç–∏ (¬´–ß—Ç–æ –º–Ω–µ —É—á–µ—Å—Ç—å –≤ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏?¬ª), —Ä–∞–∑–≤–∏—Ç–∏–∏ —Å–µ–±—è.

üìú –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:

–í—ã–±–∏—Ä–∞–µ—à—å —Ä–∞—Å–∫–ª–∞–¥ (1 –∫–∞—Ä—Ç–∞ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏, 3 –∫–∞—Ä—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞, ¬´–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç¬ª –¥–ª—è –≥–ª—É–±–∏–Ω—ã).
–§–æ—Ä–º—É–ª–∏—Ä—É–µ—à—å –≤–æ–ø—Ä–æ—Å –≤–Ω—É—Ç—Ä—å —Å–µ–±—è ‚Äì –±–æ—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –µ–≥–æ –ø–∏—Å–∞—Ç—å, –Ω–æ —Ñ–æ–∫—É—Å –≤–∞–∂–µ–Ω.
–ü–æ–ª—É—á–∞–µ—à—å –∫–∞—Ä—Ç—ã —Å —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ–º: –æ–Ω–∏ –æ—Ç—Ä–∞–∂–∞—é—Ç —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏, –∞ –Ω–µ –ø—Ä–∏–≥–æ–≤–æ—Ä.

‚ö†Ô∏è –í–∞–∂–Ω–æ:

–ö–∞—Ä—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —ç–Ω–µ—Ä–≥–∏—é –º–æ–º–µ–Ω—Ç–∞ ‚Äì –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–π –∏—Ö —á–µ—Ä–µ–∑ –ø—Ä–∏–∑–º—É —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏.
–ù–µ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª—è–π —á–∞—Å—Ç—ã–º–∏ –≥–∞–¥–∞–Ω–∏—è–º–∏ –Ω–∞ –æ–¥–Ω—É —Ç–µ–º—É ‚Äì –æ—Ç–≤–µ—Ç —É–∂–µ –¥–∞–Ω.
‚ú® –¢–∞—Ä–æ ‚Äì –∑–µ—Ä–∫–∞–ª–æ —Ç–≤–æ–µ–≥–æ –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏—è. –î–æ–≤–µ—Ä—å—Å—è –º—É–¥—Ä–æ—Å—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤!

(–ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: ¬´–ö–∞–∫ –º–Ω–µ –ø–æ–Ω—è—Ç—å —Å–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞ –∫ –•?¬ª, ¬´–ù–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –≤ —Ä–∞–±–æ—Ç–µ?¬ª, ¬´–ö–∞–∫–æ–π —É—Ä–æ–∫ —è —Å–µ–π—á–∞—Å –ø—Ä–æ—Ö–æ–∂—É?¬ª).

–ò—Ç–∞–∫, –∫–∞–∫–æ–π —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å?
""")
    return FIRST_DRAW

async def first_draw(update: Update, context: ContextTypes.DEFAULT_TYPE):
    question = update.message.text
    if not is_question_suitable(question):
        await update.message.reply_text('–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –º–æ–≥—É –≥–∞–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ª–∏—á–Ω–æ–π –∂–∏–∑–Ω—å—é, –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏, —Ä–∞–±–æ—Ç–æ–π, –∑–¥–æ—Ä–æ–≤—å–µ–º, –¥—É—Ö–æ–≤–Ω—ã–º —Ä–∞–∑–≤–∏—Ç–∏–µ–º –∏ –±—É–¥—É—â–∏–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.')
        return FIRST_DRAW
    cards = random.sample(TAROT_CARDS, 3)
    user_sessions[update.effective_user.id] = {
        'question': question,
        'cards': cards,
        'step': 1
    }
    response = f'–í–∞—à –≤–æ–ø—Ä–æ—Å: {question}\n\n–ü–µ—Ä–≤—ã–µ 3 –∫–∞—Ä—Ç—ã:'
    for idx, card in enumerate(cards, 1):
        response += f"\n{idx}. {card['name']}: {card['meaning']}\n{card['description']}\n"
    response += '\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±—Ä–∞—Ç—å –µ—â–µ –∫–∞—Ä—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ï—â—ë". –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –≥–∞–¥–∞–Ω–∏–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ "–ó–∞–≤–µ—Ä—à–∏—Ç—å".'
    keyboard = [['–ï—â—ë', '–ó–∞–≤–µ—Ä—à–∏—Ç—å']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(response, reply_markup=reply_markup)
    return SECOND_DRAW

async def second_draw(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    session = user_sessions.get(user_id)
    if not session:
        await update.message.reply_text('–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å!')
        return FIRST_DRAW
    user_text = update.message.text.lower()
    if user_text in ['–µ—â–µ', '–µ—â—ë']:
        # –¥–æ–±–∏—Ä–∞–µ–º –µ—â–µ 2 –∫–∞—Ä—Ç—ã
        already_drawn = session['cards']
        remaining = [c for c in TAROT_CARDS if c not in already_drawn]
        extra_cards = random.sample(remaining, 2)
        session['cards'].extend(extra_cards)
        session['step'] = 2
        response = '–î–æ–±—Ä–∞–Ω—ã –µ—â–µ 2 –∫–∞—Ä—Ç—ã:'
        for idx, card in enumerate(extra_cards, len(already_drawn)+1):
            response += f"\n{idx}. {card['name']}: {card['meaning']}\n{card['description']}\n"
        response += '\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –≥–∞–¥–∞–Ω–∏–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ "–ó–∞–≤–µ—Ä—à–∏—Ç—å".'
        keyboard = [['–ó–∞–≤–µ—Ä—à–∏—Ç—å']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text(response, reply_markup=reply_markup)
        return FINAL
    elif user_text == '–∑–∞–≤–µ—Ä—à–∏—Ç—å':
        return await final_analysis(update, context)
    else:
        keyboard = [['–ï—â—ë', '–ó–∞–≤–µ—Ä—à–∏—Ç—å']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ: "–ï—â—ë" —á—Ç–æ–±—ã –¥–æ–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—ã –∏–ª–∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å" —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑.', reply_markup=reply_markup)
        return SECOND_DRAW

def analyze_combinations(cards):
    names = [card['name'] for card in cards]
    found = []
    auto = []
    for i in range(len(cards)):
        for j in range(i+1, len(cards)):
            pair = tuple(sorted([names[i], names[j]]))
            if pair in COMBINATIONS:
                found.append(f'–°–æ—á–µ—Ç–∞–Ω–∏–µ {pair[0]} + {pair[1]}: {COMBINATIONS[pair]}')
            else:
                c1 = cards[i]
                c2 = cards[j]
                auto.append(f'–°–æ—á–µ—Ç–∞–Ω–∏–µ {c1["name"]} + {c2["name"]}: {c1["meaning"]} –∏ {c2["meaning"]}. –í–º–µ—Å—Ç–µ —ç—Ç–æ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Å–∏—Ç—É–∞—Ü–∏—é, –≥–¥–µ {c1["meaning"].lower()} —Å–æ—á–µ—Ç–∞–µ—Ç—Å—è —Å {c2["meaning"].lower()}.')
    return '\n'.join(found + auto) if (found or auto) else None
 
async def final_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    session = user_sessions.get(user_id)
    if not session:
        await update.message.reply_text('–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å!')
        return FIRST_DRAW
    question = session['question']
    cards = session['cards']
    prompt = (
        '–°–¥–µ–ª–∞–π —Ç—Ä–∞–∫—Ç–æ–≤–∫—É –∫–∞—Ä—Ç –¢–∞—Ä–æ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞: "' + question + '".\n'
        '–ö–∞—Ä—Ç—ã:\n'
    )
    for idx, card in enumerate(cards, 1):
        prompt += f"{idx}. {card['name']}: {card['meaning']}\n"
    prompt += (
        "–î–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω—É—é, –≥–ª—É–±–æ–∫—É—é, —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—É—é –∏ –Ω–∞—Å—ã—â–µ–Ω–Ω—É—é —Ç—Ä–∞–∫—Ç–æ–≤–∫—É –∏–º–µ–Ω–Ω–æ —ç—Ç–∏—Ö –∫–∞—Ä—Ç –ø—Ä–∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ –∫ –≤–æ–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
        "–í –æ—Ç–≤–µ—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–ø–æ–º–∏–Ω–∞–π –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ä—Ç –±–µ–∑ –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è. "
        "–ò—Å–ø–æ–ª—å–∑—É–π —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–º–∞–π–ª–∏–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, üîÆ, üÉè, ‚ù§Ô∏è, ‚ú®, ü§î –∏ –¥—Ä—É–≥–∏–µ) –¥–ª—è —É–∫—Ä–∞—à–µ–Ω–∏—è –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä–∞—Å–∞. "
        "–†–∞—Å–∫—Ä–æ–π –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã, –∏—Ö –≤–∑–∞–∏–º–æ—Å–≤—è–∑–∏, –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ä–∞–∑–≤–∏—Ç–∏—è —Å–∏—Ç—É–∞—Ü–∏–∏, –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã, –∞ —Ç–∞–∫–∂–µ –¥–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –∏ –ø—Ä–∏–º–µ—Ä—ã, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –≤—ã–ø–∞–≤—à–∏—Ö –∫–∞—Ä—Ç–∞—Ö. "
        "–ü–∏—à–∏ –≥—Ä–∞–º–æ—Ç–Ω—ã–º, –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–º –∏ –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–º —è–∑—ã–∫–æ–º, –∏–∑–±–µ–≥–∞–π —Ç–∞–≤—Ç–æ–ª–æ–≥–∏–∏, –ø–æ–≤—Ç–æ—Ä–æ–≤ –∏ —à–∞–±–ª–æ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑. "
        "–ò—Å–ø–æ–ª—å–∑—É–π –±–æ–≥–∞—Ç—ã–π –∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å. "
        "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç –∏ –Ω–µ –¥–æ–±–∞–≤–ª—è–π ** **. "
        "–ù–µ –¥–æ–±–∞–≤–ª—è–π –≤ –∫–æ–Ω—Ü–µ —Ñ—Ä–∞–∑—É '–í —Ü–µ–ª–æ–º' –∏–ª–∏ '–í –æ–±—â–µ–º', –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏—Ç–æ–≥–æ–≤–æ–µ –æ–±–æ–±—â–µ–Ω–∏–µ."
    )
    await update.message.reply_text('–í—ã–≤–æ–¥ –ø–æ –≤—ã–ø–∞–≤—à–∏–º –∫–∞—Ä—Ç–∞–º, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥:', reply_markup=ReplyKeyboardRemove())
    loop = asyncio.get_running_loop()
    try:
        answer = await loop.run_in_executor(None, generate_groq_answer, prompt)
    except Exception as e:
        import logging
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Groq API")
        answer = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}"
    await update.message.reply_text(answer, reply_markup=ReplyKeyboardRemove())
    # –î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ' –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–∞–¥–∞–Ω–∏—è
    keyboard = [['–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text('–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑? –ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ".', reply_markup=reply_markup)
    user_sessions.pop(user_id, None)
    return ConversationHandler.END

async def handle_restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ" —Å—Ä–∞–±–æ—Ç–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –≥–∞–¥–∞–Ω–∏—è –Ω–∞ –¢–∞—Ä–æ.', reply_markup=ReplyKeyboardRemove())
    return FIRST_DRAW

conv_handler = ConversationHandler(
    entry_points=[CommandHandler('start', start)],
    states={
        FIRST_DRAW: [MessageHandler(filters.Regex('(?i)^–Ω–∞—á–∞—Ç—å\s*–∑–∞–Ω–æ–≤–æ$'), handle_restart),
                     MessageHandler(filters.TEXT & ~filters.COMMAND, first_draw)],
        SECOND_DRAW: [MessageHandler(filters.Regex('(?i)^–Ω–∞—á–∞—Ç—å\s*–∑–∞–Ω–æ–≤–æ$'), handle_restart),
                      MessageHandler(filters.TEXT & ~filters.COMMAND, second_draw)],
        FINAL: [MessageHandler(filters.Regex('(?i)^–Ω–∞—á–∞—Ç—å\s*–∑–∞–Ω–æ–≤–æ$'), handle_restart),
                MessageHandler(filters.TEXT & ~filters.COMMAND, final_analysis)],
    },
    fallbacks=[CommandHandler('start', start)]
)

if __name__ == '__main__':
    TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
    if not TOKEN:
        raise RuntimeError('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è')
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(conv_handler)
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...')
    app.run_polling() 